"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ledgerDerivePrivate = ledgerDerivePrivate;

var _bn = _interopRequireDefault(require("bn.js"));

var _util = require("@polkadot/util");

var _hmac = require("../../hmac");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// performs hard-only derivation on the xprv
function ledgerDerivePrivate(xprv, index) {
  const kl = xprv.slice(0, 32);
  const kr = xprv.slice(32, 64);
  const cc = xprv.slice(64, 96);
  const data = new Uint8Array(1 + 64 + 4);
  data.set((0, _util.bnToU8a)(index, {
    bitLength: 32,
    isLe: true
  }), 1 + 64);
  data.set(kl, 1);
  data.set(kr, 1 + 32);
  data[0] = 0x00;
  const z = (0, _hmac.hmacSha512)(cc, data);
  data[0] = 0x01;
  const chainCode = (0, _hmac.hmacSha512)(cc, data).slice(32, 64);
  const zl = z.slice(0, 32);
  const zr = z.slice(32, 64);
  const left = (0, _util.bnToU8a)(new _bn.default(kl, 16, 'le').add(new _bn.default(zl.slice(0, 28), 16, 'le').mul(new _bn.default(8))), {
    bitLength: 512,
    isLe: true
  }).slice(0, 32);
  const right = (0, _util.bnToU8a)(new _bn.default(kr, 16, 'le').add(new _bn.default(zr, 16, 'le')), {
    bitLength: 512,
    isLe: true
  }).slice(0, 32);
  return (0, _util.u8aConcat)(left, right, chainCode);
}