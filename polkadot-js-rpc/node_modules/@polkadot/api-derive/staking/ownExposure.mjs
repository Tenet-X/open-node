// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { combineLatest, of } from '@polkadot/x-rxjs';
import { map, switchMap } from '@polkadot/x-rxjs/operators';
import { deriveCache, memo } from "../util/index.mjs";
const CACHE_KEY = 'ownExposure';
export function _ownExposure(instanceId, api) {
  return memo(instanceId, (accountId, era, withActive) => {
    const cacheKey = `${CACHE_KEY}-${era.toString()}-${accountId.toString()}`;
    const cached = withActive ? undefined : deriveCache.get(cacheKey);
    return cached ? of(cached) : api.queryMulti([[api.query.staking.erasStakersClipped, [era, accountId]], [api.query.staking.erasStakers, [era, accountId]]]).pipe(map(([clipped, exposure]) => {
      const value = {
        clipped,
        era,
        exposure
      };
      !withActive && deriveCache.set(cacheKey, value);
      return value;
    }));
  });
}
export function ownExposure(instanceId, api) {
  return memo(instanceId, (accountId, era) => api.derive.staking._ownExposure(accountId, era, true));
}
export function _ownExposures(instanceId, api) {
  return memo(instanceId, (accountId, eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._ownExposure(accountId, era, withActive))) : of([]));
}
export function ownExposures(instanceId, api) {
  return memo(instanceId, (accountId, withActive = false) => {
    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._ownExposures(accountId, eras, withActive)));
  });
}